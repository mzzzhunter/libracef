///////////////////////////////////////////////////////////////////////////////
//
// ExportCEFFile-AllBestHits.Unknowns.script
//
// Copyright (c) Agilent Technologies, Inc. 2012-15
//
// Description:  Exports all Best Hits in a CEF (Compound Exchange 
//               Format) file.
//               Creates one CEF file per sample.
//
// Requirements: B.05.01 or later (B315.0 or later)
//
// Notes:        Requires an opened analysis.
//
///////////////////////////////////////////////////////////////////////////////

#region References & Namespaces
//-----------------------------------------------------------------------------
//! <script>
//!  <name>Export CEF File (All Best Hits)</name>
//!  <language>CSharp</language>
//!  <reference>System.dll</reference>
//!  <reference>System.Xml.dll</reference>
//!  <reference>System.Windows.Forms.dll</reference>
//!  <reference>UnknownsAnalysisII.dll</reference>
//!  <reference>UnknownsAnalysisDataSet.dll</reference>
//!  <import>System</import>
//!  <import>System.Xml</import>
//!  <import>System.Windows.Forms</import>
//!  <import>System.Reflection</import>
//!  <import>System.Collections.Generic</import>
//!  <import>Agilent.MassSpectrometry.DataAnalysis.UnknownsAnalysisII</import>
//!  <import>System.IO</import>
//!  <import>System.Threading</import>
//! </script>
//-----------------------------------------------------------------------------
#endregion

try
{
	#region Script Version
	const string Version = "1.0.150814";
	#endregion
	
	#region Configuration
	const short ExportAllComponents = 0;
	const short ExportAllHits = 1;
	const short ExportTargetHits = 2;
	const short ExportNonTargetHits = 3;
	const short ExportNonHits = 4;
	const short ExportChoice = ExportAllHits;
	bool bestHitsOnly = true;
	#endregion
	
	#region Constants
	#region Spectrum Type and Compound Finding Algorithm
	const string defaultSpectrumType = "AMDIS";
	const string defaultCpdAlgo = "FindByAMDIS";
	#endregion
	#endregion
	
	#region Make sure that an Analysis is opened before continuing
	UnknownsAnalysisDataSet.BatchDataTable batches = UIState.UADataAccess.GetBatches();
	if ((0 == batches.Count) || (!UIState.HasAnalysis))
	{
		System.Windows.Forms.MessageBox.Show("Please open an Analysis first.", null,
			MessageBoxButtons.OK, MessageBoxIcon.Information);
		return;
	}
	#endregion
	#region Prompt the user for the destination folder
	string batchDirectory = null;
	string cefOutputFolderName = null;
	if (!string.IsNullOrEmpty(UIState.BatchFolder))
	{
		batchDirectory = UIState.BatchFolder;
		cefOutputFolderName = UIState.BatchFolder;
	}
	
	// FolderBrowserDialog folderBrowserDialog1 = new System.Windows.Forms.FolderBrowserDialog();
	// folderBrowserDialog1.Description = "Export one CEF file per sample at the following location";
	// folderBrowserDialog1.SelectedPath = batchDirectory; //Default to batch directory
	// DialogResult result = folderBrowserDialog1.ShowDialog();
	// if (result != DialogResult.OK)
		// return;
	// cefOutputFolderName = folderBrowserDialog1.SelectedPath;
	#endregion
	#region Retrieve samples
	int batchID = batches[0].BatchID;
	UnknownsAnalysisDataSet.SampleDataTable samples = UIState.UADataAccess.GetSamples(batchID);
	#endregion

	for (int sampleIndex = 0; sampleIndex<samples.Count; sampleIndex++)
	{
		int sampleID = samples[sampleIndex].SampleID;
		#region Get the sample file name
		string fileName = "";
		if (!samples[sampleIndex].IsDataFileNameNull())
		{
			fileName = samples[sampleIndex].DataFileName;
		}
		else
		{
			System.Windows.Forms.MessageBox.Show("Cannot read sample file name.", null,
				MessageBoxButtons.OK, MessageBoxIcon.Information);
			return;
		}
		#endregion
		
		#region Extract the components for the current sample
		UnknownsAnalysisDataSet.ComponentDataTable components = 
			UIState.UADataAccess.GetComponents(batchID, sampleID);
		#endregion
		
		#region Extract the hits for the current sample
		UnknownsAnalysisDataSet.HitDataTable allHits =
			UIState.UADataAccess.GetHits(batchID, sampleID);
		#endregion
		
		#region Extract the ion peaks for the current sample
		UnknownsAnalysisDataSet.IonPeakDataTable allIonPeaks =
			UIState.UADataAccess.GetIonPeak(batchID, sampleID);
		#endregion
		
		#region Create the CEF file Name from the sample file name
		string cefFileName = fileName;
		int fileExtPos = fileName.LastIndexOf(".");
		if (fileExtPos >= 0 )
			cefFileName = fileName.Substring(0, fileExtPos);
		
		string choiceSuffix = "";
		switch (ExportChoice)
		{
			case ExportAllComponents:
				choiceSuffix = "-AllComponents";
			break;
			case ExportAllHits:
				if (bestHitsOnly)
					choiceSuffix = "-AllBestHits";
				else
					choiceSuffix = "-AllHits";
			break;
			case ExportTargetHits:
				if (bestHitsOnly)
					choiceSuffix = "-TargetBestHits";
				else
					choiceSuffix = "-TargetHits";
			break;
			case ExportNonTargetHits:
				if (bestHitsOnly)
					choiceSuffix = "-NonTargetBestHits";
				else
					choiceSuffix = "-NonTargetHits";
			break;
			case ExportNonHits:
				choiceSuffix = "-NonHits";
			break;
			default:
			break;			
		}
		cefFileName += choiceSuffix;
		
		// Increment file name if the file already exists.
		if (File.Exists(Path.Combine(cefOutputFolderName, (cefFileName + ".cef"))))
		{
			for (int num=1; num<10000; num++)
			{
				string increment = "-"+ num.ToString().PadLeft(3,'0');
				if (!File.Exists(Path.Combine(cefOutputFolderName, (cefFileName + increment + ".cef"))))
				{
					cefFileName += increment;
					break;
				}
			}
		}
		cefFileName += ".cef";
		#endregion

		#region Write the CEF file
		string cefFilePath = Path.Combine(cefOutputFolderName, cefFileName);
		XmlWriter xmlWriter = null;

		try
		{
			#region Create CEF file
			XmlWriterSettings xmlSettings = new XmlWriterSettings();
			xmlSettings.Indent = true;
			xmlSettings.OmitXmlDeclaration = true;
			xmlWriter = XmlWriter.Create(cefFilePath, xmlSettings);
			// Begin CEF file
			string VersionInfo = "Generated from MassHunter Unknowns Analysis [Script Rev. " + Version + "]" + choiceSuffix;
			xmlWriter.WriteComment(VersionInfo);
			xmlWriter.WriteStartElement("CEF");
			xmlWriter.WriteAttributeString("version", "1.0.0.0");
			xmlWriter.WriteStartElement("CompoundList");
			#endregion
						
			#region Export components
			// Go through each components in the sample
			foreach (UnknownsAnalysisDataSet.ComponentRow componentRow in components)
			{
				if (componentRow.IsPrimaryHitIDNull() && (ExportChoice==ExportAllHits))
					continue;
				if (componentRow.IsPrimaryHitIDNull() && (ExportChoice==ExportTargetHits))
					continue;
				if (componentRow.IsPrimaryHitIDNull() && (ExportChoice==ExportNonTargetHits))
					continue;
				if (!componentRow.IsPrimaryHitIDNull() && (ExportChoice==ExportNonHits))
					continue;
					
				if (bestHitsOnly && componentRow.IsBestHitNull())
					continue;
				if (bestHitsOnly && !componentRow.IsBestHitNull() && !componentRow.BestHit)
					continue;					
				
				#region Read compound
				#region Initialize Fields
				double? compoundRT = null;
				double? compoundRI = null;
				double? area = null;
				double? height = null;
				double? width = null;
				string casId = null;
				string compoundName = null;
				string molecularFormula = null;
				double? libraryMatchScore = null;
				string ionPolarity = null;
				string cefIonPolarity = "+";
				double? compoundMZ = null;
				double? compoundSelectedMZ = null;
				string scanType = null;
				double[] spectrumAbundances = null;
				double[] spectrumMZs = null;
				#endregion
								
				int componentID = componentRow.ComponentID;
				int deconvolutionMethodID = componentRow.DeconvolutionMethodID;
				
				#region Do not export non-visible ("deleted") hits 
				if (!componentRow.IsPrimaryHitIDNull())
				{
					System.Data.DataRow[] componentList = allHits.Select(
						string.Format("DeconvolutionMethodID={0} AND ComponentID={1} AND HitID={2} AND Visible={3}",
							deconvolutionMethodID, componentID, componentRow.PrimaryHitID, true));
					if (componentList.Length == 0)
						continue;
				}
				#endregion
								
				#region Read Hit Table
				if (!componentRow.IsPrimaryHitIDNull())
				{
					System.Data.DataRow[] hits = allHits.Select(
							string.Format("DeconvolutionMethodID={0} AND ComponentID={1} AND HitID={2}",
								deconvolutionMethodID, componentID, componentRow.PrimaryHitID));
					
					if (hits.Length == 1)
					{		
						if (hits[0].IsNull("TargetCompoundID")  && (ExportChoice==ExportTargetHits))
							continue;
						if (!(hits[0].IsNull("TargetCompoundID"))  && (ExportChoice==ExportNonTargetHits))
							continue;
						
						#region Get CAS Number
						if (!hits[0].IsNull("CASNumber"))
						{
							casId = (string)hits[0]["CASNumber"];
						}
						#endregion
						#region Get Compound Name
						if (!hits[0].IsNull("CompoundName"))
						{
							compoundName = (string)hits[0]["CompoundName"];
						}
						#endregion
						#region Get Estimated Concentration
						if (!hits[0].IsNull("EstimatedConcentration"))
						{
							double estimatedConcentration = (double)hits[0]["EstimatedConcentration"];
						}
						#endregion
						#region Get Molecular Formula
						if (!hits[0].IsNull("Formula"))
						{
							molecularFormula = (string)hits[0]["Formula"];
						}
						#endregion
						#region Get Library Match Score
						if (!hits[0].IsNull("LibraryMatchScore"))
						{
							libraryMatchScore = (double)hits[0]["LibraryMatchScore"];
						}
						#endregion
					}
				}
				#endregion
				
				#region Get Retention Time
				if (!componentRow.IsRetentionTimeNull())
					compoundRT = componentRow.RetentionTime;
				#endregion
				
				#region Get Retention Index
				if (!componentRow.IsRetentionIndexNull())
					compoundRI = componentRow.RetentionIndex;
				#endregion
				#region Area
				if (!componentRow.IsAreaNull())
				{
					area = componentRow.Area;
				}
				#endregion
				#region Height
				if (!componentRow.IsHeightNull())
				{
					height = componentRow.Height;
				}
				#endregion
				#region Get spectrum
				if (!componentRow.IsSpectrumAbundancesNull())
				{
					spectrumAbundances = UIState.UADataAccess.Base64ToDoubleArray(componentRow.SpectrumAbundances);
				}
				if (!componentRow.IsSpectrumMZsNull())
				{
					spectrumMZs = UIState.UADataAccess.Base64ToDoubleArray(componentRow.SpectrumMZs); 
				}
				#endregion
				#endregion
				
				#region Read Ion Peak Table
				if (!componentRow.IsModelIonPeakIDNull())
				{
					System.Data.DataRow[] ionPeaks = allIonPeaks.Select(
							string.Format("DeconvolutionMethodID={0} AND ComponentID={1} AND IonPeakID={2}",
								deconvolutionMethodID, componentID, componentRow.ModelIonPeakID));
	
					if (ionPeaks.Length == 1)
					{		
						#region Get Polarity
						if (!ionPeaks[0].IsNull("IonPolarity"))
						{
							ionPolarity = (string)ionPeaks[0]["IonPolarity"];
							cefIonPolarity = (ionPolarity == "Positive")? "+" : "-";
						}
						#endregion
						#region Get MZ
						if (!ionPeaks[0].IsNull("MZ"))
						{
							compoundMZ = (double)ionPeaks[0]["MZ"];
						}
						#endregion
						#region Get Selected MZ
						if (!ionPeaks[0].IsNull("SelectedMZ"))
						{
							compoundSelectedMZ = (double)ionPeaks[0]["SelectedMZ"];
						}
						#endregion
						#region Get Scan Type
						if (!ionPeaks[0].IsNull("ScanType"))
						{
							scanType = (string)ionPeaks[0]["ScanType"];
						}
						#endregion
					}
				}
				#endregion
										
				#region Write compound node
				xmlWriter.WriteStartElement("Compound");
				xmlWriter.WriteAttributeString("algo", defaultCpdAlgo);
				#region Location Node
				xmlWriter.WriteStartElement("Location");
				if (compoundMZ != null)
				{
					xmlWriter.WriteAttributeString("m", ((double)compoundMZ).ToString("F5"));
				}
				if (compoundRT != null)
				{
					xmlWriter.WriteAttributeString("rt", ((double)compoundRT).ToString("F3"));
				}
				if (compoundRI != null)
				{
					xmlWriter.WriteAttributeString("ri", ((double)compoundRI).ToString("F3"));
				}
				// xmlWriter.WriteAttributeString("rtw", ); // Width
				#region Area
				if (area != null)
				{
					xmlWriter.WriteAttributeString("a", ((double)area).ToString("F2"));
				}
				#endregion
				#region Height
				if (height != null)
				{
					xmlWriter.WriteAttributeString("y", ((double)height).ToString("F2"));
				}
				#endregion
				#region Width
				if (width != null)
				{
					xmlWriter.WriteAttributeString("rtw", ((double)width).ToString("F3"));
				}
				#endregion
				xmlWriter.WriteEndElement(); // Location
				#endregion
				#region Results
				if ((compoundName != null) || (molecularFormula != null) || (casId != null))
				{
					xmlWriter.WriteStartElement("Results");
					xmlWriter.WriteStartElement("Molecule");
					if (compoundName != null)
						xmlWriter.WriteAttributeString("name", compoundName);
					if (molecularFormula != null)
						xmlWriter.WriteAttributeString("formula", molecularFormula);
						
					#region CAS ID
					if (casId != null)
					{
						xmlWriter.WriteStartElement("Database");
						xmlWriter.WriteStartElement("Accession");
						xmlWriter.WriteAttributeString("db", "CAS ID");
						xmlWriter.WriteAttributeString("id", casId);
						xmlWriter.WriteEndElement(); // Accession
						xmlWriter.WriteEndElement(); // Database
					}
					#endregion
					xmlWriter.WriteEndElement(); // Molecule
					xmlWriter.WriteEndElement(); // Results
				}
				#endregion
				#region Spectrum Node
				if ((spectrumAbundances != null) && (spectrumMZs != null) &&
					(spectrumAbundances.Length == spectrumMZs.Length))
				{
					xmlWriter.WriteStartElement("Spectrum");
					xmlWriter.WriteAttributeString("type", defaultSpectrumType);
					xmlWriter.WriteAttributeString("cpdAlgo", defaultCpdAlgo);
					
					#region MSDetails Node
					xmlWriter.WriteStartElement("MSDetails");
					xmlWriter.WriteAttributeString("p", cefIonPolarity);
					xmlWriter.WriteEndElement(); // MSDetails
					#endregion
					#region Device Node
					// not implemented
					#endregion
					#region MSPeaks Node
					xmlWriter.WriteStartElement("MSPeaks");
					int peakCount = spectrumAbundances.Length;
					// Find the max abundance to normalize the spectrum.
					double maxAbundance = 0;
					for (int peakIndex = 0; peakIndex < peakCount; peakIndex++)
					{
						if (spectrumAbundances[peakIndex] > maxAbundance)
							maxAbundance = spectrumAbundances[peakIndex];
					}
					
					for (int peakIndex = 0; peakIndex < peakCount; peakIndex++)
					{
						#region Peak Node
						xmlWriter.WriteStartElement("p");
						xmlWriter.WriteAttributeString("x", spectrumMZs[peakIndex].ToString("F5"));
						// Normalize to 999.0
						double normalizedAbundance = spectrumAbundances[peakIndex] * 999.0 / maxAbundance;
						xmlWriter.WriteAttributeString("y", normalizedAbundance.ToString("F4"));
						xmlWriter.WriteAttributeString("z", "1");
						xmlWriter.WriteEndElement(); // p
						#endregion
					}
					xmlWriter.WriteEndElement(); // MSPeaks
					#endregion
					xmlWriter.WriteEndElement(); // Spectrum
				}
				#endregion
				xmlWriter.WriteEndElement(); // Compound
				xmlWriter.Flush();
				#endregion
			}
			#endregion
				
			#region Close CEF file
			xmlWriter.WriteEndElement(); // CompoundList
			xmlWriter.WriteEndElement(); // CEF
			// Write the XML to file and close the writer.
			xmlWriter.Flush();
			xmlWriter.Close();
			#endregion
		}
		finally
		{
			if (xmlWriter != null)
			   xmlWriter.Close();
		} 
		#endregion
	}
}
catch(Exception exception)
{
	System.Windows.Forms.MessageBox.Show(exception.Message);
}